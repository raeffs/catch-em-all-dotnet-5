//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
    providedIn: 'root'
})
export class AuctionService {
    private readonly http: HttpClient;

    constructor(http: HttpClient) {
        this.http = http;
    }

    /**
     * @return Success
     */
    public getAllAuctions(): Observable<AuctionSummary[]> {
        let url = '/api/auctions';
        url = url.replace(/[?&]$/, '');

        return this.http.get<AuctionSummary[]>(url);
    }

}

@Injectable({
    providedIn: 'root'
})
export class SearchQueryService {
    private readonly http: HttpClient;

    constructor(http: HttpClient) {
        this.http = http;
    }

    /**
     * @return Success
     */
    public getAllSearchQueries(): Observable<SearchQuerySummary[]> {
        let url = '/api/search-queries';
        url = url.replace(/[?&]$/, '');

        return this.http.get<SearchQuerySummary[]>(url);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    public createSearchQuery(body?: CreateSearchQueryOptions | undefined): Observable<SearchQueryDetail> {
        let url = '/api/search-queries';
        url = url.replace(/[?&]$/, '');

        const _body = body;

        return this.http.post<SearchQueryDetail>(url, _body);
    }

    /**
     * @return Success
     */
    public getSearchQuery(id: string): Observable<SearchQueryDetail> {
        let url = '/api/search-queries/{id}';
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        url = url.replace(/[?&]$/, '');

        return this.http.get<SearchQueryDetail>(url);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    public updateSearchQuery(id: string, body?: SearchQueryDetail | undefined): Observable<SearchQueryDetail> {
        let url = '/api/search-queries/{id}';
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        url = url.replace(/[?&]$/, '');

        const _body = body;

        return this.http.put<SearchQueryDetail>(url, _body);
    }

    /**
     * @return Success
     */
    public getAuctions(id: string): Observable<AuctionSummary[]> {
        let url = '/api/search-queries/{id}/auctions';
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        url = url.replace(/[?&]$/, '');

        return this.http.get<AuctionSummary[]>(url);
    }

}

export interface AuctionSummary {
    id?: string;
    name?: string | null;
    ends?: string;
    bidPrice?: number | null;
    purchasePrice?: number | null;
}

export interface SearchQuerySummary {
    id?: string;
    name?: string | null;
    numberOfAuctions?: number;
}

export interface CreateSearchQueryOptions {
    searchTerm?: string | null;
}

export interface SearchCriteria {
    withAllTheseWords?: string | null;
    withOneOfTheseWords?: string | null;
    withExactlyTheseWords?: string | null;
    withNoneOfTheseWords?: string | null;
}

export interface SearchQueryDetail {
    id?: string;
    name?: string | null;
    criteria?: SearchCriteria;
}