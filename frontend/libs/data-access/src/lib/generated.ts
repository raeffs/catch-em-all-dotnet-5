//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
    providedIn: 'root'
})
export class QueryService {
    private readonly http: HttpClient;

    constructor(http: HttpClient) {
        this.http = http;
    }

    /**
     * @return Success
     */
    public getAllQueries(): Observable<SearchQuerySummary[]> {
        let url = '/api/queries';
        url = url.replace(/[?&]$/, '');

        return this.http.get<SearchQuerySummary[]>(url);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    public createQuery(body?: CreateQueryOptions | undefined): Observable<SearchQuerySummary> {
        let url = '/api/queries';
        url = url.replace(/[?&]$/, '');

        const _body = body;

        return this.http.post<SearchQuerySummary>(url, _body);
    }

    /**
     * @return Success
     */
    public getQuery(id: number): Observable<SearchQuerySummary> {
        let url = '/api/queries/{id}';
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        url = url.replace(/[?&]$/, '');

        return this.http.get<SearchQuerySummary>(url);
    }

}

export interface SearchCriteria {
    withAllTheseWords?: string | null;
}

export interface SearchQuerySummary {
    id?: number;
    name?: string | null;
    criteria?: SearchCriteria;
    numberOfAuctions?: number;
}

export interface CreateQueryOptions {
    searchTerm?: string | null;
}